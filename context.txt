express → Framework to build APIs
cors → Allows React to communicate with Node.js (CORS policy)
mongoose → Connects to MongoDB
dotenv → Loads environment variables

What is Express.js?
Express.js is a fast, minimal, and flexible Node.js web framework.
It helps in building backend APIs and web applications easily.
Provides powerful routing, middleware support, and simplifies handling requests & responses.

What is Mongoose?
Mongoose is an ODM (Object Data Modeling) library for MongoDB in Node.js.
It helps in interacting with MongoDB using JavaScript objects instead of raw queries.
Provides schema-based structure to define how data should be stored in MongoDB.


CORS (Cross-Origin Resource Sharing) is a security mechanism implemented by web browsers to restrict web pages from making requests to a different domain than the one that served the web page. In the context of React applications, CORS is crucial when the application needs to communicate with a backend API hosted on a different domain.

Introduction to dotenv
Explaining why we need dotenv in backend development:

When building applications, we often use sensitive data like database credentials, API keys, or secret tokens.
Storing these directly in the code is unsafe and can lead to security issues if shared publicly.
The .env file helps us store such sensitive information securely and separately.



*MongoDB Connection String Format*

To connect a Node.js app to MongoDB Atlas, use the following format:


mongodb+srv://<username>:<password>@cluster0.xxxxx.mongodb.net/<database-name>?retryWrites=true&w=majority


### *Explanation:*
- **<username>** → Your MongoDB Atlas username.
- **<password>** → Your password (avoid special characters like @, :, / without encoding).
- **cluster0.xxxxx.mongodb.net** → Your MongoDB cluster address.
- **<database-name>** → The name of your database.

### *Example:*
If your username is studentUser, password is pass123, and database is studentDB, then:

mongodb+srv://<username>:<password>@cluster0.xxxxx.mongodb.net/myDatabase?retryWrites=true&w=majority

MONGO_URI=mongodb+srv://studentUser:pass123@cluster0.xxxxx.mongodb.net/studentDB?retryWrites=true&w=majority


### *Best Practices:*
- Store the connection string in a .env file, not in your code.
- Use the dotenv package to load environment variables:



*MongoDB URI vs. URL*

### *What is a URI?*
A *URI (Uniform Resource Identifier)* is a general identifier for a resource. It can refer to a location (URL) or a name (URN).

*Example of a MongoDB URI:*

mongodb+srv://username:password@cluster0.mongodb.net/myDatabase

In MongoDB, the *connection string is called a URI* because it identifies the database location *and* includes authentication details.

### *What is a URL?*
A *URL (Uniform Resource Locator)* is a specific type of URI that provides a way to locate a resource, usually with a network address and protocol.

*Example of a URL:*

https://www.mongodb.com/docs/

This is a *URL* because it tells the browser exactly where to go on the web.

### *Why Does MongoDB Use "URI" Instead of "URL"?*
- A MongoDB *connection string* does not just specify a location; it also includes authentication details and options.
- Because it is more than just a "locator," it is referred to as a *MongoDB URI* instead of a URL.

### *Summary:*
- *Use "MongoDB URI"* when referring to your *database connection string*.
- *Use "URL"* when referring to a *web address*.

This distinction helps in understanding how MongoDB connections work.